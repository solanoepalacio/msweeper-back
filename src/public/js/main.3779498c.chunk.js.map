{"version":3,"sources":["api.js","Components/Game/GameSquare.jsx","Components/Game/index.js","Components/StartView/index.jsx","App.js","index.js"],"names":["handleNetworkError","error","console","api","createGame","rows","cols","body","JSON","stringify","fetch","method","headers","content-type","then","response","json","catch","updateGame","gameId","action","location","GameSquare","props","x","y","sweeped","flagged","isMine","classes","push","react_default","a","createElement","className","join","onClick","sweep","bind","onContextMenu","e","preventDefault","flag","Square","col","row","_this","this","Object","classCallCheck","toggleFlag","createClass","key","value","grid","neighbors","Game","possibleConstructorReturn","getPrototypeOf","call","newGrid","state","map","slice","setState","handleUpdateGame","handleSweep","sweepExpansion","arguments","length","undefined","gameStatus","sweepedElement","handleGameOver","forEach","n","status","addNeighbors","_assertThisInitialize","assertThisInitialized","square","mineLocations","id","buildGrid","i","j","column","locationLabel","indexOf","_this2","setTimeout","window","alert","restartGame","_this3","reduce","columns","index","columnElements","elementIdentifier","columnComponent","Component","StartView","updateValue","_ref","target","name","defineProperty","startGame","_this$state","handleStartGame","_this$state2","htmlFor","type","min","max","onChange","App","loading","gameData","currentView","Game_Game","assign","StartView_StartView","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3779498c.chunk.js","sourcesContent":["const api = {\n  createGame: function (rows, cols) {\n    const body = JSON.stringify({\n      rows,\n      cols\n    });\n\n    return fetch('/game', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body\n    })\n      .then((response) => response.json())\n      .catch(handleNetworkError)\n  },\n  \n  updateGame (gameId, action, location) {\n    const body = JSON.stringify({\n      gameId,\n      action,\n      location\n    });\n\n    return fetch('/game', {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body\n    })\n      .catch(handleNetworkError)\n    \n  }\n}\n\nfunction handleNetworkError (error) {\n  // TODO => handle network error.\n  console.error('NetworkError', error);\n}\n\nexport default api;","import React from 'react';\n\nimport './game.scss';\n\nexport function GameSquare (props) {\n  const {x, y, sweeped, flagged, isMine } = props;\n\n  const classes = ['grid-square'];\n  \n  if (flagged) {\n    classes.push('flagged');\n  }\n  \n  if (sweeped) {\n    classes.push('sweeped');\n  }\n\n  if (isMine) {\n    classes.push('mine');\n  }\n\n  return (\n    <div\n      className={classes.join(' ')}\n      onClick={props.sweep.bind(null, x, y)}\n      onContextMenu={(e) => {\n        e.preventDefault();\n        props.flag(x, y)}\n      }\n    />\n  )\n}\n\nexport class Square {\n  constructor (col, row, isMine) {\n    this.x = col;\n    this.y = row;\n    \n    this.isMine = isMine;\n    this.sweeped = false;\n    this.flagged = false;\n  }\n\n  sweep = () => {\n    this.sweeped = true;\n  }\n\n  toggleFlag = () => {\n    this.flagged = !this.flagged;\n  }\n\n  addNeighbors(grid, rows, cols) {\n    this.neighbors = [];\n    const { x, y } = this;\n    \n    if (x < cols -1)\n      this.neighbors.push(grid[x + 1][y]);\n\n    if (x > 0)\n      this.neighbors.push(grid[x - 1][y]);\n\n    if (y < rows -1)\n      this.neighbors.push(grid[x][y + 1]);\n\n    if (y > 0)\n      this.neighbors.push(grid[x][y - 1]);\n\n    // uncoment to add diagonal sweep expansion\n    // if (x > 0 && y > 0)\n    //   this.neighbors.push(grid[x - 1][y - 1]);\n\n    // if (x > 0 && y > 0)\n    //   this.neighbors.push(grid[x - 1][y - 1]);\n\n    // if (x < cols -1 && y > 0)\n    //   this.neighbors.push(grid[x + 1][y - 1]);\n\n    // if (x < cols -1 && y < rows -1)\n    //   this.neighbors.push(grid[x + 1][y + 1]);\n\n    // if (x > 0 && y < rows -1)\n    //   this.neighbors.push(grid[x - 1][y + 1]);\n  }\n}\n","import React, { Component } from 'react';\n\nimport './game.scss'\n\nimport { Square, GameSquare } from './GameSquare';\n\nexport default class Game extends Component {\n  constructor (props) {\n    super(props);\n\n    const {\n      mineLocations,\n      rows,\n      cols,\n      id,\n      status\n    } = props;\n\n    this.gameId = id\n    this.rows = rows;\n    this.cols = cols;\n\n    const grid = this.buildGrid(mineLocations);\n    this.state = { grid, status };\n    this.addNeighbors();\n  }\n\n  buildGrid (mineLocations) {\n    const { rows, cols } = this;\n\n    let i = 0;\n    let grid = [];\n    while (i < cols) {\n      let j = 0;\n      const column = [];\n      while (j < rows) {\n        const isMine = this.isMine(mineLocations, i, j);\n        \n        const square = new Square(i, j, isMine);\n\n        column.push(square);\n        j++\n      }\n      grid.push(column);\n      i++\n    }\n    \n    return grid;\n  }\n\n  isMine (mineLocations, i, j) {\n    const locationLabel = [i, j].join(':');\n    return mineLocations.indexOf(locationLabel) >= 0;\n  }\n\n  toggleFlag = (x, y) => {\n    const newGrid = this.state.grid.map((col) => col.slice());\n    const square = newGrid[x][y];\n    square.toggleFlag();\n\n    this.setState({ grid: newGrid });\n\n    this.props.handleUpdateGame('flag', x, y);\n  }\n\n  handleSweep = (x, y, sweepExpansion = true) => {\n    if (this.state.gameStatus === 'finished') {\n      return;\n    }\n\n    const newGrid = this.state.grid.map((col) => col.slice());\n    const sweepedElement = newGrid[x][y];\n    \n    if (sweepedElement.flagged) {\n      return;\n    }\n\n    if (sweepExpansion) \n      this.props.handleUpdateGame('sweep', x, y);\n\n    sweepedElement.sweep();\n    \n    if (sweepedElement.isMine) {\n      this.handleGameOver();\n    } else {\n      sweepedElement.neighbors.forEach((n) => {\n        if (\n          !n.sweeped &&\n          (!n.isMine || this.state.status === 'finished')\n        ) {\n          n.sweep();\n          this.handleSweep(n.x, n.y, false);\n        }      \n      });\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleGameOver() {\n    const newGrid = this.state.grid.map((col) => {\n      return col.map((square) => {\n        square.sweep();\n        return square\n      });\n    });\n    this.setState({ grid: newGrid }, () => {\n      setTimeout(() => {\n        window.alert('Game will be restarted');\n        this.props.restartGame();\n      }, 2000);\n    });\n  }\n\n  addNeighbors = () => {\n    const { rows, cols } = this;\n    const grid = this.state.grid;\n    grid.forEach((col) => {\n      col.forEach((square) => {\n        square.addNeighbors(grid, rows, cols);\n      });\n    });\n  }\n\n\trender() {\n    return (\n      <div className=\"grid-container\">\n        {this.state.grid.reduce((columns, column, index) => {\n          const columnElements = column.map((square) => {\n            const elementIdentifier = [square.x, square.y].join(':');\n            const component = (\n              <GameSquare \n                key={elementIdentifier}\n                x={square.x}\n                y={square.y}\n                sweeped={square.sweeped}\n                isMine={square.isMine}\n                flagged={square.flagged}\n                sweep={this.handleSweep}\n                flag={this.toggleFlag}/>\n            )\n            return component\n          });\n    \n          const columnComponent = (\n            <div key={index} className=\"column\">\n              {columnElements}\n            </div>\n          )\n\n          columns.push(columnComponent);\n\n          return columns;\n        }, [])}\n      </div>\n    )\n\t}\n}\n","import React, { Component } from 'react';\n\nimport './start-view.scss';\n\nexport default class StartView extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      rows: 20,\n      cols: 20\n    }\n  }\n\n  updateValue = ({ target }) => {\n    const { value, name } = target;\n    this.setState({ [name]: value })\n  }\n\n  startGame = () => {\n    const { rows, cols } = this.state;\n    this.props.handleStartGame(rows, cols);\n  }\n\n  render () {\n    const { rows, cols } = this.state;\n\n    return (\n      <div className=\"start-view-container\">\n        <p>Select the grid size and click start to play!</p>\n        <div className=\"controller\">\n          <div>\n            <label htmlFor=\"rows\">Rows: <small>({rows})</small></label>\n            <input\n              id=\"rows\"\n              name=\"rows\"\n              type=\"range\"\n              min=\"2\"\n              max=\"40\"\n              value={rows}\n              onChange={this.updateValue}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"cols\" >Cols: <small>({cols})</small></label>\n            <input \n              id=\"cols\"\n              name=\"cols\"\n              type=\"range\"\n              min=\"2\"\n              max=\"40\"\n              value={cols}\n              onChange={this.updateValue}\n            />\n          </div>\n        </div>\n        <div className=\"btn-container\">\n          <span className=\"btn\" onClick={this.startGame}>Start !</span>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nimport './App.scss';\n\nimport api from './api';\n\nimport Game from './Components/Game';\nimport StartView from './Components/StartView';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      loading: false,\n      gameData: null\n    };\n  }\n\n  startGame = (rows, cols) => {\n    this.setState({ loading: true });\n    api.createGame(rows, cols).then((gameData) => {\n      this.setState({\n        loading: false,\n        gameData\n      });\n    });\n  }\n\n  updateGame = (action, x, y) => {\n    api.updateGame(this.state.gameData.id, action, { x, y });\n  }\n\n  restartGame = () => {\n    this.setState({\n      gameData: null\n    });\n  }\n\n  render() {\n    const { loading, gameData } = this.state;\n    let currentView = loading\n      ? <p>loading...</p>\n      : gameData\n      ? <Game {...gameData} handleUpdateGame={this.updateGame} restartGame={this.restartGame}/>\n      : <StartView handleStartGame={this.startGame} />\n\n    return (\n      <div className=\"app-container\">\n        <h3>Minesweeper</h3>\n        { currentView }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './globals.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}